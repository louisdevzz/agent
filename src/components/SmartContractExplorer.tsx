'use client'

import { useState, useEffect } from 'react'
import { executeTransaction, ContractFunction, parseRustContract } from '../utils/contractParser'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Keypair, PublicKey } from '@solana/web3.js'
import { BN } from 'bn.js'

interface FunctionOptions {
  gas?: string;
  attachedDeposit?: string;
}

interface OracleConfigParams {
  confFilter: number;
  maxStalenessSlots?: number;
}

interface AutoGeneratedArgs {
  authority: string;
  payer?: string;
  market?: string;
  systemProgram?: string;
  tokenProgram?: string;
  associatedTokenProgram?: string;
  rent?: string;
  clock?: string;
}

interface SmartContractExplorerProps {
  programId: string;
}

export default function SmartContractExplorer({ programId }: SmartContractExplorerProps) {
  const [functions, setFunctions] = useState<ContractFunction[]>([])
  const [selectedFunction, setSelectedFunction] = useState<ContractFunction | null>(null)
  const [args, setArgs] = useState<Record<string, string>>({})
  const [result, setResult] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)

  // Default values for different functions
  const defaultArgsMap: Record<string, Record<string, string>> = {
    createMarket: {
      name: "SOL-USDC",
      quoteLotSize: "100",    // 0.0001 USDC
      baseLotSize: "100000",  // 0.0001 SOL
      makerFee: "-200",       // -0.02%
      takerFee: "400",        // 0.04%
      timeExpiry: "0",
      oracleConfig: JSON.stringify({
        confFilter: 0.1,
        maxStalenessSlots: 100,
        enable: true,
        oracleProvider: 0,  // PYTH
        oracleType: 0,      // PYTH
        oracleConfidence: 0.1,
        oracleDecimals: 6,
        oraclePrice: 0,
        oraclePublisher: null,
        oracleTimestamp: 0,
        oracleDelay: 0,
        oracleSize: 0,
        oracleSource: 0,
        oracleQuoteDecimals: 6,
        oracleBaseDecimals: 9,
        data: {
          magic: 0xa1b2c3d4,
          version: 2,
          type: 0,
          size: 32,
          priceType: 0,
          exponent: -8,
          currentSlot: 0,
          validSlot: 0,
          productAccountKey: Array(32).fill(0),
          nextPriceAccountKey: Array(32).fill(0),
          productGreeks: Array(32).fill(0),
          drv2: Array(32).fill(0),
          drv3: Array(32).fill(0),
          drv4: Array(32).fill(0),
          publisherSlot: 0,
          metrics: Array(32).fill(0),
        },
        status: {
          slot: 0,
          confidence: 0,
          status: 1,  // Trading
          corporateAction: 0,
          priceComponents: Array(32).fill(0),
        },
      }),
      minBaseOrderSize: "100000", // Minimum 0.0001 SOL
      tickSize: "1",          // Minimum price increment
    },
    // Add default args for other functions here
  };

  useEffect(() => {
    async function loadRustFile() {
      try {
        const response = await fetch('/idl.json')
        const rustCode = await response.text()
        const parsedFunctions = await parseRustContract(rustCode)
        console.log(parsedFunctions)
        setFunctions(parsedFunctions)
      } catch (error) {
        console.error('Error loading Rust file:', error)
      }
    }
    loadRustFile()
  }, [])

  const handleFunctionChange = (functionName: string) => {
    const func = functions.find(f => f.name === functionName)
    setSelectedFunction(func || null)
    // Set default args for the selected function
    setArgs(defaultArgsMap[functionName] || {})
    setResult(null)
  }

  const handleArgChange = (name: string, value: string) => {
    try {
      if (name === 'oracleConfig') {
        const currentConfig = args.oracleConfig ? JSON.parse(args.oracleConfig) : {};
        const newConfig = {
          ...currentConfig,
          ...JSON.parse(value),
          enable: true,
          oracleProvider: 0,
          oracleType: 0,
          oracleConfidence: 0.1,
          oracleDecimals: 6,
          oraclePrice: 0,
          oraclePublisher: null,
          oracleTimestamp: 0,
          oracleDelay: 0,
          oracleSize: 0,
          oracleSource: 0,
          oracleQuoteDecimals: 6,
          oracleBaseDecimals: 9,
          data: {
            magic: 0xa1b2c3d4,
            version: 2,
            type: 0,
            size: 32,
            priceType: 0,
            exponent: -8,
            currentSlot: 0,
            validSlot: 0,
            productAccountKey: Array(32).fill(0),
            nextPriceAccountKey: Array(32).fill(0),
            productGreeks: Array(32).fill(0),
            drv2: Array(32).fill(0),
            drv3: Array(32).fill(0),
            drv4: Array(32).fill(0),
            publisherSlot: 0,
            metrics: Array(32).fill(0),
          },
          status: {
            slot: 0,
            confidence: 0,
            status: 1,  // Trading
            corporateAction: 0,
            priceComponents: Array(32).fill(0),
          },
        };
        setArgs(prev => ({
          ...prev,
          [name]: JSON.stringify(newConfig)
        }));
      } else {
        setArgs(prev => ({ ...prev, [name]: value }));
      }
    } catch (error) {
      console.error('Error handling argument change:', error);
    }
  };

  const handleExecute = async () => {
    if (!selectedFunction) return
    setLoading(true)
    try {
      const signature = await executeTransaction(
        selectedFunction.name, 
        args,
        { gas: '30000000000000', attachedDeposit: '0' }
      )
      setResult(`Transaction successful! Signature: ${signature}`);
    } catch (error) {
      console.error('Error executing function:', error)
      setResult(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`)
    }
    setLoading(false)
  }

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Smart Contract Explorer</CardTitle>
        <CardDescription>Test smart contract functions</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <Label htmlFor="function-select">Select Function</Label>
            <Select 
              onValueChange={handleFunctionChange}
              value={selectedFunction?.name || ''}
            >
              <SelectTrigger id="function-select">
                <SelectValue placeholder="Choose a function" />
              </SelectTrigger>
              <SelectContent>
                {functions.map((func, index) => (
                  <SelectItem key={`${func.name}-${index}`} value={func.name}>
                    {func.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {selectedFunction && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium">Function Arguments</h3>
              {selectedFunction.arguments.map((arg, index) => (
                <div key={`${selectedFunction.name}-${arg.name}-${index}`}>
                  <Label htmlFor={`${selectedFunction.name}-${arg.name}`}>
                    {arg.name} ({arg.type})
                  </Label>
                  <Input
                    id={`${selectedFunction.name}-${arg.name}`}
                    value={args[arg.name] || ''}
                    onChange={(e) => handleArgChange(arg.name, e.target.value)}
                    placeholder={defaultArgsMap[selectedFunction.name]?.[arg.name] || `Enter ${arg.name}`}
                  />
                </div>
              ))}
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button onClick={handleExecute} disabled={!selectedFunction || loading}>
          {loading ? 'Executing...' : 'Execute'}
        </Button>
        {result && (
          <div className="ml-4 p-2 bg-gray-100 rounded">
            <pre className="whitespace-pre-wrap">{result}</pre>
          </div>
        )}
      </CardFooter>
    </Card>
  )
}

